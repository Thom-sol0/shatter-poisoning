[DATASET]
dataset_package = decentralizepy.datasets.MovieLens
dataset_class = MovieLens
model_class = MatrixFactorization
train_dir = ./data/movielens
test_dir = ./data/movielens
; python list of fractions below
sizes =
random_seed = 90
test_batch_size = 128

[OPTIMIZER_PARAMS]
optimizer_package = torch.optim
optimizer_class = SGD
lr = 0.075

[TRAIN_PARAMS]
training_package = decentralizepy.training.Training
training_class = Training
rounds = 1
full_epochs = True
batch_size = 32
shuffle = True
loss_package = torch.nn
loss_class = MSELoss

[COMMUNICATION]
comm_package = decentralizepy.communication.TCP
comm_class = TCP
addresses_filepath = ip.json

[SHARING]
sharing_package = virtualNodes.sharing.VNodeSharingAttackRandomLOSS
sharing_class = VNodeSharingAttackRandomLOSS
compress = False
; Only attack every attack_after communication rounds (In Muffliato, attack the model just after training)
attack_after = 1000
; Toggle to enable or disable attacking
perform_attack = True
; Number of received model chunks to attack -> helps speed up experiments
attack_random = 4
; will_receive should be set to k * graph_degree
will_receive = 4

[NODE]
; k in SHATTER
vnodes_per_node = 1
; Degree of the topology, each node has graph_degree neighbors
graph_degree = 4
; dynamic = True means that a new topology is generated at each round
dynamic = True
; Noise parameter sigma in Muffliato
noise_std = 0.025
; Number of communication rounds per training round in Muffliato
train_after = 10
